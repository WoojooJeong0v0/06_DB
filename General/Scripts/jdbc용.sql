
SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY > 4000000;


-- 입력받은 최소 급여 이상, 최대 급여 이하를 받는 
SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY BETWEEN 4000000 AND 6000000
ORDER BY SALARY DESC;


--  부서명 입력받아 해당 부서에 근무하는 사원 사번 이름 부서명 직급명
-- 직급 코드 오름차순 조회

SELECT e.EMP_ID, e.EMP_NAME, d.DEPT_TITLE, j.JOB_NAME
FROM EMPLOYEE e
JOIN JOB j ON e.JOB_CODE = j.JOB_CODE
JOIN DEPARTMENT d ON e.DEPT_CODE = d.DEPT_ID
WHERE DEPT_TITLE = '인사관리부'
ORDER BY e.JOB_CODE ASC;

SELECT * FROM DEPARTMENT;

-- 테이블 생성
-- TB_USER 

CREATE TABLE TB_USER(
	USER_NO NUMBER CONSTRAINT TB_USER_PK PRIMARY KEY,
	USER_ID VARCHAR2(30) NOT NULL,
	USER_PW VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	ENROLL_DATE DATE DEFAULT CURRENT_DATE
);

COMMENT ON COLUMN TB_USER.USER_NO IS '사용자 번호';
COMMENT ON COLUMN TB_USER.USER_ID IS '사용자 아이디';
COMMENT ON COLUMN TB_USER.USER_PW IS '사용자 패스워드';
COMMENT ON COLUMN TB_USER.USER_NAME IS '사용자 이름';
COMMENT ON COLUMN TB_USER.ENROLL_DATE IS '사용자 가입일';

-- USER_NO 컬럼 삽입될 시퀀스 생성
 
CREATE SEQUENCE SEQ_USER_NO NOCACHE;

-- 샘플 데이터 인서트
INSERT INTO TB_USER
VALUES(SEQ_USER_NO.NEXTVAL, 'user01', 'pass01', '유저일', default);

SELECT * FROM TB_USER;

COMMIT;

-- 6
UPDATE TB_USER
SET 
 USER_NAME = '홍길동'
WHERE USER_id = 'user01' 
AND USER_PW = 'pass01';

-- 아이디, 비밀번호 일치 -> 수정 성공 1
-- 아이디, 비밀번호 불일치 -> 수정 실패 0

ROLLBACK;


-- 240827 jdbc 문제

-- EMPLOYEE 테이블에서
-- 사번 이름 성별 급여 직급명 부서명 조회
-- 입력 조건에 맞는 결과만 조회하고 정렬
-- 조건 1 ) 성별    M / F
-- 조건 2 ) 급여범위
-- 조건 3 ) 급여 오름차순/내림차순

/*
// [실행화면]
// 조회할 성별(M/F) : F
// 급여 범위(최소, 최대 순서로 작성) : 3000000 4000000
// 급여 정렬(1.ASC, 2.DESC) : 2

 * */

SELECT EMP_ID, EMP_NAME,
DECODE(SUBSTR(EMP_NO, 8, 1), '1', 'M', '2', 'F') "성별",
SALARY,
JOB_NAME,
NVL(DEPT_TITLE, '없음')
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
LEFT JOIN DEPARTMENT ON EMPLOYEE.DEPT_CODE = DEPARTMENT.DEPT_ID
WHERE SALARY BETWEEN 4000000 AND 6000000 
AND DECODE(SUBSTR(EMP_NO, 8, 1), '1', 'M', '2', 'F') = 'M'
ORDER BY SALARY ASC;



-- 240828 
-- 모든 user 조회하기
SELECT
	USER_NO,
	USER_ID,
	USER_PW,
	USER_NAME,
	TO_CHAR(ENROLL_DATE, 'YYYY"년" MM"월" DD"일"') ENROLL_DATE
FROM TB_USER
ORDER BY USER_NO ASC;


-- 검색어가 이름에 포함된 유저 찾기
SELECT
	USER_NO,
	USER_ID,
	USER_PW,
	USER_NAME,
	TO_CHAR(ENROLL_DATE, 'YYYY"년" MM"월" DD"일"') ENROLL_DATE
FROM TB_USER
WHERE USER_NAME LIKE '%' || ? || '%'
ORDER BY USER_NO ASC;


-- 유저 넘버 선택하여 삭제
DELETE 
FROM TB_USER
WHERE USER_NO = ?;

-- 일치하는 유저넘버 있을 경우 : 1행 삭제
-- 없을 경우 : 0행 삭제

SELECT * FROM TB_USER;

-- 아이디 비밀번호 일치하는 select
SELECT USER_NO
FROM TB_USER
WHERE USER_ID = 'user08'
AND USER_PW = 'pass08';

-- 아이디, 비밀번호 일치하는 회원 이름 수정
-- USER_NO
-- 아이디, 패스워드 두 개 확인보다
-- 빠르고 확실한 USER_NO 로 구분하기
UPDATE TB_USER
 SET 
 USER_NAME = ?
WHERE USER_NO = ?;

ROLLBACK;

-- 중복 아이디 있는지 조회
-- 중복이면 1, 아니면 0

SELECT COUNT(*)
FROM TB_USER
WHERE USER_ID = 'user08';